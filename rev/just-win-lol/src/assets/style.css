body {
    background-size: cover;
    background-position: center top;   
    background-image: url("/static/balatrobg.jpg");
    margin: 0;
    padding: 0;
}
.wrapper {
    width: 100vw;
    height: 100vh;
    display: grid;
    place-items: center;
}
.card {
    --rotateX: 0deg;
    --rotateY: 0deg;
    --rotateZ: 0deg;
    --scale: 1;
    /* use manually nearest neighbor scaled image instead of transform: scale otherwise we
    get blurry images when the 3d transform is applied even with image-rendering: pixelated */
    background-image: url("/static/balatrocards-2x.png");
    background-color: white;
    display: inline-block;
    position: relative;
    width: 142px;
    height: 190px;
    transform: 
        perspective(5000px)
        rotateX(var(--rotateX))
        rotateY(var(--rotateY))
        rotateZ(var(--rotateZ))
        scale(var(--scale));
    transform-style: preserve-3d;
    transition: all 0.1s ease-out;
    transition: scale 0.4s linear;
    transition: rotateZ 0.4s linear;
    margin: -20px;
    image-rendering: pixelated;
    image-rendering: -moz-crisp-edges;
    image-rendering: crisp-edges;
    /* trigger antialiasing for 3d transforms - https://stackoverflow.com/a/27065674 */
    outline: 1px solid transparent;
    box-shadow: 0 0 30px red;
}
.card:hover {
    animation: wiggle 0.4s linear 1;
    cursor: pointer;
    z-index: 1;
}

/* from https://easings.net/#easeInElastic which roughly
approximates Balatro's Moveable:move_juice() eyeballing it on wolframalpha's plot
when reversed and the last keyframe is set to 1
move_juice() is
0.02 * sin(50.8*t) * max(0, 0.4 - t/ 0.4)^3 for scale and
0.0012 * sin(40.8*t) * max(0, 0.4 - t/ 0.4)^2 for rotation
*/
@keyframes wiggle {
    0% {
        transform:
            perspective(5000px)
            rotateX(var(--rotateX))
            rotateY(var(--rotateY))
            rotateZ(var(--rotateZ))
            scale(calc(var(--scale) * 1));

    }
    4% {
        transform:
            perspective(5000px)
            rotateX(var(--rotateX))
            rotateY(var(--rotateY))
            rotateZ(calc(var(--rotateZ) - 6deg))
            scale(calc(var(--scale) * 1.37));
    }
    8% {
        transform:
            perspective(5000px)
            rotateX(var(--rotateX))
            rotateY(var(--rotateY))
            rotateZ(calc(var(--rotateZ) + 4deg))
            scale(calc(var(--scale) * 0.87));
    }
    14% {
        transform:
            perspective(5000px)
            rotateX(var(--rotateX))
            rotateY(var(--rotateY))
            rotateZ(calc(var(--rotateZ) - 3deg))
            scale(calc(var(--scale) * 1.04));
    }
    18% {
        transform:
            perspective(5000px)
            rotateX(var(--rotateX))
            rotateY(var(--rotateY))
            rotateZ(calc(var(--rotateZ) + 2deg))
            scale(calc(var(--scale) * 1.05));
    }
    26%, 28% {
        transform:
            perspective(5000px)
            rotateX(var(--rotateX))
            rotateY(var(--rotateY))
            rotateZ(calc(var(--rotateZ) - 1deg))
            scale(calc(var(--scale) * 0.98));
    }
    40%, 42% {
        transform:
            perspective(5000px)
            rotateX(var(--rotateX))
            rotateY(var(--rotateY))
            rotateZ(calc(var(--rotateZ) - 1deg))
            scale(calc(var(--scale) * 1.01));
    }
    56%, 58%, 72%, 86%, 100% {
        transform:
            perspective(5000px)
            rotateX(var(--rotateX))
            rotateY(var(--rotateY))
            rotateZ(var(--rotateZ))
            scale(var(--scale));
    }
}
/* from https://codepen.io/meduzen/pen/zxbwRV */
.scanlines {
    position: relative;
    overflow: hidden;
}
.scanlines:before, .scanlines:after {
    display: block;
    pointer-events: none;
    content: "";
    position: absolute;
}
.scanlines:before {
    width: 100%;
    height: 2px;
    z-index: 2147483649;
    background: rgba(0, 0, 0, 0.3);
    opacity: 0.3;
}
.scanlines:after {
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 2147483648;
    background: linear-gradient(to bottom, transparent 50%, rgba(100, 100, 100, 0.1) 51%);
    background-size: 100% 4px;
}

/* from https://pixelcorners.lukeb.co.uk/?radius=5&multiplier=3&border=1&border_width=1&border_color=#cacfd0 */
.pixel-corners,
.pixel-corners--wrapper {
clip-path: polygon(0px calc(100% - 9px),
    3px calc(100% - 9px),
    3px calc(100% - 6px),
    6px calc(100% - 3px),
    9px calc(100% - 3px),
    9px 100%,
    calc(100% - 9px) 100%,
    calc(100% - 9px) calc(100% - 3px),
    calc(100% - 6px) calc(100% - 3px),
    calc(100% - 3px) calc(100% - 6px),
    calc(100% - 3px) calc(100% - 9px),
    100% calc(100% - 9px),
    100% 9px,
    calc(100% - 3px) 9px,
    calc(100% - 3px) 6px,
    calc(100% - 6px) 3px,
    calc(100% - 9px) 3px,
    calc(100% - 9px) 0px,
    9px 0px,
    9px 3px,
    6px 3px,
    3px 6px,
    3px 9px,
    0px 9px);
position: relative;
}
.pixel-corners {
border: 3px solid transparent;
}
.pixel-corners--wrapper {
width: fit-content;
height: fit-content;
}
.pixel-corners--wrapper .pixel-corners {
display: block;
clip-path: polygon(3px 9px,
    6px 9px,
    6px 6px,
    9px 6px,
    9px 3px,
    calc(100% - 9px) 3px,
    calc(100% - 9px) 6px,
    calc(100% - 6px) 6px,
    calc(100% - 6px) 9px,
    calc(100% - 3px) 9px,
    calc(100% - 3px) calc(100% - 9px),
    calc(100% - 6px) calc(100% - 9px),
    calc(100% - 6px) calc(100% - 6px),
    calc(100% - 9px) calc(100% - 6px),
    calc(100% - 9px) calc(100% - 3px),
    9px calc(100% - 3px),
    9px calc(100% - 6px),
    6px calc(100% - 6px),
    6px calc(100% - 9px),
    3px calc(100% - 9px));
}
.pixel-corners::after,
.pixel-corners--wrapper::after {
content: "";
position: absolute;
clip-path: polygon(0px calc(100% - 9px),
    3px calc(100% - 9px),
    3px calc(100% - 6px),
    6px calc(100% - 3px),
    9px calc(100% - 3px),
    9px 100%,
    calc(100% - 9px) 100%,
    calc(100% - 9px) calc(100% - 3px),
    calc(100% - 6px) calc(100% - 3px),
    calc(100% - 3px) calc(100% - 6px),
    calc(100% - 3px) calc(100% - 9px),
    100% calc(100% - 9px),
    100% 9px,
    calc(100% - 3px) 9px,
    calc(100% - 3px) 6px,
    calc(100% - 6px) 3px,
    calc(100% - 9px) 3px,
    calc(100% - 9px) 0px,
    9px 0px,
    9px 3px,
    6px 3px,
    3px 6px,
    3px 9px,
    0px 9px,
    0px 50%,
    3px 50%,
    3px 9px,
    6px 9px,
    6px 6px,
    9px 6px,
    9px 3px,
    calc(100% - 9px) 3px,
    calc(100% - 9px) 6px,
    calc(100% - 6px) 6px,
    calc(100% - 6px) 9px,
    calc(100% - 3px) 9px,
    calc(100% - 3px) calc(100% - 9px),
    calc(100% - 6px) calc(100% - 9px),
    calc(100% - 6px) calc(100% - 6px),
    calc(100% - 9px) calc(100% - 6px),
    calc(100% - 9px) calc(100% - 3px),
    9px calc(100% - 3px),
    9px calc(100% - 6px),
    6px calc(100% - 6px),
    6px calc(100% - 9px),
    3px calc(100% - 9px),
    3px 50%,
    0px 50%);
top: 0;
bottom: 0;
left: 0;
right: 0;
background: #cacfd0;
display: block;
pointer-events: none;
}
.pixel-corners::after {
margin: -3px;
}